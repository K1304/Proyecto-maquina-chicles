#include <SPI.h> 
#include <MFRC522.h> // includes the necesary libraries for the RFID chip 

int LEDR = 3; // define the red LED output pin
int LEDG = 4; // define the green LED output pin

#define RST_PIN  9    // uses the pin 9 for reseting the RC522
#define SS_PIN  10   // pin 9 for the SS (SDA) of the RC522
MFRC522 mfrc522(SS_PIN, RST_PIN); // create the variable for the RC522

//#include <Servo.h> // includes servo library
//Servo servoMotor; // creates the servo variable

void setup() {
  Serial.begin(9600); // begin the serial com
  SPI.begin();        // begin the SPI bus
  mfrc522.PCD_Init(); // Iniciate MFRC522
  pinMode(LEDR, OUTPUT);   // define pin 3 as output 
    pinMode(LEDG, OUTPUT);   // define pin4 as output 
    digitalWrite (LEDR , HIGH);  // set the red LED as high
    digitalWrite (LEDG , LOW);  // set the green LED as low 
  Serial.println("Control de acceso:"); 
}

byte ActualUID[4]; // stores the user ID
byte Usuario1 [4]= {0xD9, 0x84, 0xc4, 0x98} ; // user ID1 
byte Usuario2 [4]= {0x49, 0x1A, 0x91, 0x0E} ; // user ID2 (unreal)
// Card UID: D9 84 C4 98 card ID
// Card UID: 49 1A 91 6E tag ID

void loop() {
  // detect if new card is scanned
  if ( mfrc522.PICC_IsNewCardPresent()) 
        {  
      // select a card
            if ( mfrc522.PICC_ReadCardSerial()) 
            {
                  // send its UID 
                  Serial.print(F("Card UID:"));
                  for (byte i = 0; i < mfrc522.uid.size; i++) {
                          Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
                          Serial.print(mfrc522.uid.uidByte[i], HEX);   
                          ActualUID[i]=mfrc522.uid.uidByte[i];          
                  } 
                  Serial.print("     ");                 
                  // verify if card ID matches registered one
                 {
                  if(compareArray(ActualUID,Usuario1))
                    Serial.println("Access granted...");
                     digitalWrite (LEDG , HIGH);      // if ID correct, sets green LED as ON
                     digitalWrite (LEDR , LOW);      // and sets red LED as OFF
                     delay (2000); // waits 2s 
                     digitalWrite (LEDR , HIGH); // set red LED as ON
                     digitalWrite (LEDG , LOW); // set green LED as OFF
                    }
               // else if(compareArray(ActualUID,User2))
            }
                  else
                   { 
                    Serial.println("Access denied..."); 
                      for (int i = 0; i < 4; i++); 
                      digitalWrite(LEDR,HIGH);
                      delay(1000);
                      digitalWrite(LEDR,LOW); //if ID incorrect red LED blinks four times
                   }

                  // finish the chip reading 
                  mfrc522.PICC_HaltA();

            }

  }

}
//FunciÃ³n para comparar dos vectores
 boolean compareArray(byte array1[],byte array2[])
{
  if(array1[0] != array2[0])return(false);
  if(array1[1] != array2[1])return(false);
  if(array1[2] != array2[2])return(false);
  if(array1[3] != array2[3])return(false);
  return(true);
}
