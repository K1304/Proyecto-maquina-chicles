@@ -0,0 +1,61 @@
#include <SPI.h>
#include <MFRC522.h>
int LEDR = 3;
int LEDV = 4;

#define RST_PIN  9    //Pin 9 para el reset del RC522
#define SS_PIN  10   //Pin 10 para el SS (SDA) del RC522
MFRC522 mfrc522(SS_PIN, RST_PIN); ///Creamos el objeto para el RC522

void setup() {
  Serial.begin(9600); //Iniciamos La comunicacion serial
  SPI.begin();        //Iniciamos el Bus SPI
  mfrc522.PCD_Init(); // Iniciamos el MFRC522
  pinMode(LEDR, OUTPUT);   //Declaramos el pin digital 3 como salida
    pinMode(LEDV, OUTPUT);   //Declaramos el pin digital 4 como salida 
    digitalWrite (LEDR , HIGH);  //Definimos la salida digital 3 con un estado bajo
    digitalWrite (LEDV , LOW);  //Definimos la salida digital 4 con un estado bajo
  Serial.println("Control de acceso:");
}

byte ActualUID[4]; //almacenará el código del Tag leído
byte Usuario1[4]= {0xD9, 0x84, 0xc4, 0x98} ; //código del usuario 1
byte Usuario2[4]= {0x49, 0x1A, 0x91, 0x0E} ; //código del usuario 2 09:48:06.531 -> Card UID: D9 84 C4 98
//09:48:15.878 -> Card UID: 49 1A 91 6E

void loop() {

  // Revisamos si hay nuevas tarjetas  presentes
  if ( mfrc522.PICC_IsNewCardPresent()) 
        {  
      //Seleccionamos una tarjeta
            if ( mfrc522.PICC_ReadCardSerial()) 
            {
                  // Enviamos serialemente su UID
                  Serial.print(F("Card UID:"));
                  for (byte i = 0; i < mfrc522.uid.size; i++) {
                          Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
                          Serial.print(mfrc522.uid.uidByte[i], HEX);   
                          ActualUID[i]=mfrc522.uid.uidByte[i];          
                  } 
                  Serial.print("     ");                 
                  //comparamos los UID para determinar si es uno de nuestros usuarios  
                  if(compareArray(ActualUID,Usuario1))
                    Serial.println("Acceso concedido...");
                     digitalWrite (LEDV , HIGH);     //Si el sensor detecta una distancia menor a 20 cm enciende el LED Rojo
                     digitalWrite (LEDR , LOW);      // y apaga el verde    
                     delay (2000); // espera dos segundos
                     digitalWrite (LEDR , HIGH); // enciende led rojo
                     digitalWrite (LEDV , LOW); // apaga el led verde
                  else if(compareArray(ActualUID,Usuario2))
                    Serial.println("Acceso concedido...");
                    digitalWrite (LEDG , HIGH);     // if ID correct, activates LEDG
                     digitalWrite (LEDR , LOW);      // and deactivates LEDR   
                     delay (2000); // espera dos segundos
                     digitalWrite (LEDR , HIGH); // enciende led rojo
                     digitalWrite (LEDV , LOW); // apaga el led verde
                  else
                    Serial.println("Acceso denegado...");
                      for (int i = 0; i < 4; i++); 
                      digitalWrite(LEDR,HIGH);
                      delay(1000);
                      digitalWrite(LEDR,LOW); // enciende y apaga el led rojo 4 veces

                  // Terminamos la lectura de la tarjeta tarjeta  actual
                  mfrc522.PICC_HaltA();

            }

  }

}

//Función para comparar dos vectores
 boolean compareArray(byte array1[],byte array2[])
{
  if(array1[0] != array2[0])return(false);
  if(array1[1] != array2[1])return(false);
  if(array1[2] != array2[2])return(false);
  if(array1[3] != array2[3])return(false);
  return(true);
}
